#include <reg932.h>

sbit tetris = P2^0;
sbit sponge = P0^2;
sbit piano = P2^5;

sbit sw1 = P2^1;
sbit sw2 = P0^3;
sbit sw3 = P2^2;
sbit wave = P1^7;
sbit LED1 = P2^5;
sbit LED2 = P0^7;
sbit LED3 = P2^6;

#define note_A4 2095
#define note_C5 1761
#define note_D5 1569
#define note_C4 3523
#define note_D4 3138
#define note_E4 2796
#define note_F4 2639
#define note_F3 5278
#define note_D4b 3325
#define note_D4s 2962
#define note_A5 1047
#define note_B5 933
#define note_C6 881
#define note_D6 785
#define note_E6 699
#define note_B3 3954
#define note_A3 4189

unsigned int quarterNote = 450;
unsigned int wholeNote;
unsigned int halfNote;
unsigned int eighthNote;
unsigned int note_test;
int globalNote;
static bit mtxbusy;
char globalCount; // for piano chord selection

void playNote(int note);
void stopNote();
void piano();
void display();
void uart_transmit(char c);
void playnotetime(int note,int n);
void tetris();
voi noteDelay(unsigned int interval);
void setTempo(unsigned int Tempo);

void TIMR1ISR() interrupt 3
{
	TR1 = 0;
	wave = ~wave;
	TH1 = -(globalNote>>8);
	TL1 = -globalNote;
	TF1 = 0;
	TR1 = 1;
}

void playNote(int note)
{
	IEN0 = 0x8A;
	TMOD = 0x10;
	globalNote = note;
	TH1 = -(note>>8);
	TL1 = -note;
	TR1 = 1;
}


void stopNote()
{
	IEN0 = 0x00;
	TR1 = 0;
	TF1 = 0;
	wave = 1;
}

void piano()
{
	unsigned int mod1;
	unsigned int mod2;
	unsigned int mod3;
	if(swMid == 0)
	{
		if(globalCount == 0)
		{
			LED4 = ~LED4;
			mod1+= 256; // changes A4 to G4
			mod2+= 216; // changes C4 to A4#
			mod3+= 192; // changes D5 to C5
			globalCount++;
		}
		else if(globalCount < 4)
		{
			LED5 = ~LED5;
			mod1 += 3000;
			mod2 += 4000;
			mod3 += 5000;
			globalCount++;
		}
		else
		{
			LED4 = 1;
			LED5 = 1;
			mod1 = 0;
			mod2 = 0;
			mod3 = 0;
			globalCount = 0;
		}
		while(swMid == 0);
	}
	if(sw1 == 0)
	{
		LED1 = 0;
		playNote(note_A4+mod1);
		while(sw1 == 0);
		LED1 = 1;
	}
	if(sw2 == 0)
	{
		LED2 = 0;
		playNote(note_C5+mod2);
		while(sw2 == 0);
		LED2 = 1;
	}

	if(sw3 == 0)
	{
		LED3 = 0;
		playNote(note_D5+mod3);
		while(sw3 == 0);
		LED3 = 1;
	}
	else
		stopNote();
}
void display()
{

	uart_init();

	while (1)
        {
         if (tetris == 0)
          {
            uart_transmit('T');
            uart_transmit('e');
	          uart_transmit('t');
            uart_transmit('r');
            uart_transmit('i');
            uart_transmit('s');
	          while (tetris==0);

          }

	 if (sponge == 0)
	  {
            uart_transmit('S');
            uart_transmit('p');
	    uart_transmit('o');
            uart_transmit('n');
            uart_transmit('g');
            uart_transmit('e');
            uart_transmit('B');
            uart_transmit('o');
            uart_transmit('b');
            uart_transmit(' ');
            uart_transmit('S');
            uart_transmit('q');
            uart_transmit('u');
            uart_transmit('a');
            uart_transmit('r');
            uart_transmit('e');
            uart_transmit('p');
            uart_transmit('a');
            uart_transmit('n');
            uart_transmit('t');
            uart_transmit('s');

            delay(20000);
            
            uart_transmit('O');
            uart_transmit('h');
	    uart_transmit('!');
            uart_transmit(' ');
            uart_transmit('W');
            uart_transmit('h');
            uart_transmit('o');
            uart_transmit('');
            uart_transmit('l');
            uart_transmit('i');
            uart_transmit('v');
	    uart_transmit('e');
            uart_transmit('s');
            uart_transmit(' ');
            uart_transmit('i');
            uart_transmit('n');
            uart_transmit(' ');
            uart_transmit('a');
            uart_transmit(' ');
            uart_transmit('p');
	    uart_transmit('i');
            uart_transmit('n');
            uart_transmit('e');
            uart_transmit('a');
            uart_transmit('p');
            uart_transmit('p');
            uart_transmit('l');
            uart_transmit('e');
            uart_transmit(' ');
	    uart_transmit('u');
            uart_transmit('n');
            uart_transmit('d');
            uart_transmit('e');
            uart_transmit('r');
            uart_transmit(' ');
            uart_transmit('t');
            uart_transmit('h');
            uart_transmit('e');
	    uart_transmit(' ');
            uart_transmit('s');
            uart_transmit('e');
            uart_transmit('a');
            uart_transmit(' ');
            uart_transmit('S');
            uart_transmit('p');
	    uart_transmit('o');
            uart_transmit('n');
            uart_transmit('g');
            uart_transmit('e');
            uart_transmit('B');
            uart_transmit('o');
            uart_transmit('b');
            uart_transmit(' ');
            uart_transmit('S');
            uart_transmit('q');
            uart_transmit('u');
            uart_transmit('a');
            uart_transmit('r');
            uart_transmit('e');
            uart_transmit('p');
            uart_transmit('a');
            uart_transmit('n');
            uart_transmit('t');
            uart_transmit('s');

           
	    while (sponge==0);

          }
   
        }	 

}

void uart_init
  (
  void
  )
{
  // configure UART
  // clear SMOD0
  PCON &= ~0x40;
  SCON = 0x50;
  // set or clear SMOD1
  PCON &= 0x7f;
  PCON |= (0 << 8);
  SSTAT = 0x00;

  // enable break detect
  AUXR1 |= 0x40;

  // configure baud rate generator
  BRGCON = 0x00;
  BRGR0 = 0xF0;
  BRGR1 = 0x02;                      //BRGR0 and BRGR1 were
  BRGCON = 0x03;                     //changed to set the baud rate to 9600

  // TxD = push-pull, RxD = input
  P1M1 &= ~0xfe;
  P1M1 |= 0x02;
  P1M2 &= ~0xfd;
  P1M2 |= 0x01;
  
  

  // initially not busy
  mtxbusy = 0;

  // set isr priority to 0
  IP0 |= 0x10;
  IP0H |= 0x10;
  // enable uart interrupt
  ES = 1;
  EA = 1;

} // uart_init

void delay(long x)
{	
	long i= 0;
	for(i;i<x;i++);

}

void uart_isr(void) interrupt 4 using 1
{
  if (RI)
  {
            // PUT CODE THAT EXECUTES WHEN RECEIVING A BYTE HERE
	 char letter = uart_get();
     if (letter == 's')
	  {
        spongebob();
	  }

	  if (letter == 't')
	  {
        tetris();
	  }	  
     
    // clear interrupt flag
    RI = 0;
  } // if

  if (TI)
  {
    // clear interrupt flag
    TI = 0;
    // no longer busy
    mtxbusy = 0;
  } // if

} // uart_isr
 

unsigned char uart_get   
(  
 void   
) 
{   
return SBUF; 
} // uart_get

void uart_transmit(char c)
{
  while(mtxbusy);
  mtxbusy = 1;
  SBUF = c;
}

void tetris(){
	playnotetime(note_E4, 3*eighthNote);
	playnotetime(note_B3, eighthNote);
	playnotetime(note_C4, quarterNote);
	playnotetime(note_D4, eighthNote);
	playnotetime(note_C4, eighthNote);
	playnotetime(note_B3, 3*eighthNote);
	playnotetime(note_A3, eighthNote);
	playnotetime(note_A3, quarterNote);
	playnotetime(note_C4, eighthNote);
	playnotetime(note_E4, eighthNote);
	
	
}

void playnotetime(int note, unsigned int n)
{
  unsigned int z = n;
  int i;
  playNote(note);
  LED1 = 0;
  while(z-- > 0)
  {
	for(i = 0; i < 250; i++);
  }
  LED1 = 1;
  stopNote();
}

void main() 
{
  P2M1 = 0x00;
  P1M1 = 0x00;
  P0M1 = 0x00;

  TMOD = 0x11;
  IEN1 = 0x88;

  while(1);
  {
    if (tetris == 0)
    {
      while (tetris == 0 && sponge == 1 && piano == 1)
      {
        display();
        tetris();
      }
    }
    if (sponge == 0)
    {
      while (sponge == 0 && tetris == 1 && piano == 1)
      {
      	display();
        sponge();
      }
    }
    if (keybrd == 0)
    {
      while (tetris == 1 && sponge == 1)
      {
        piano();
      }
    }
  }
}

void spongebob()
{
	setTempo(120);
	playnotetime(note_D4b, quarterNote);
	playnotetime(note_D4b, quarterNote);
	playnotetime(note_D4b, quarterNote);
	playnotetime(note_D4, eighthNote);
	playnotetime(note_C4, eighthNote);
	playnotetime(note_D4s, eighthNote);
	playnotetime(note_C4, eighthNote);
	playnotetime(note_A3, eighthNote);
	playnotetime(note_F3, eighthNote);
	playnotetime(note_A3, eighthNote);
	playnotetime(note_C4, eighthNote);
	playnotetime(note_D4, eighthNote);
	playnotetime(note_C4, eighthNote);
	playnotetime(note_A3, quarterNote);
	playnotetime(note_F4, eighthNote);
	playnotetime(note_E4, eighthNote);
	playnotetime(note_F4, eighthNote);
	playnotetime(note_D4, eighthNote);
	playnotetime(note_C4, eighthNote);
	playnotetime(note_D4, eighthNote);
	playnotetime(note_C4, eighthNote);
	playnotetime(note_A3, eighthNote);
	playnotetime(note_F4, eighthNote);
	playnotetime(note_A3, eighthNote);
	playnotetime(note_F4, eighthNote);
}

void setTempo()
{
  wholeNote = 4 * quarterNote;
  halfNote = 2 * quarterNote;
  eighthNote = quarterNote / 2;
 }


